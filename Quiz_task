import java.util.*;
import java.util.concurrent.*;

class Question {
    private String questionText;
    private String[] options;
    private int correctOptionIndex;

    public Question(String questionText, String[] options, int correctOptionIndex) {
        this.questionText = questionText;
        this.options = options;
        this.correctOptionIndex = correctOptionIndex;
    }

    public String getQuestionText() {
        return questionText;
    }

    public String[] getOptions() {
        return options;
    }

    public int getCorrectOptionIndex() {
        return correctOptionIndex;
    }

    public boolean isCorrect(int optionIndex) {
        return optionIndex == correctOptionIndex;
    }
}

class QuizApp {
    private static final int TIME_LIMIT = 10; // 10 seconds for each question
    private List<Question> questions;
    private int score;
    private Scanner scanner;
    private ScheduledExecutorService scheduler;

    public QuizApp() {
        this.questions = new ArrayList<>();
        this.score = 0;
        this.scanner = new Scanner(System.in);
        this.scheduler = Executors.newScheduledThreadPool(1);
    }

    public void addQuestion(Question question) {
        questions.add(question);
    }

    public void startQuiz() {
        for (int i = 0; i < questions.size(); i++) {
            Question question = questions.get(i);
            System.out.println("\nQuestion " + (i + 1) + ": " + question.getQuestionText());
            String[] options = question.getOptions();
            for (int j = 0; j < options.length; j++) {
                System.out.println((j + 1) + ". " + options[j]);
            }

            int userAnswer = getUserAnswer();
            if (question.isCorrect(userAnswer - 1)) {
                System.out.println("Correct!");
                score++;
            } else {
                System.out.println("Incorrect! The correct answer was: " + (question.getCorrectOptionIndex() + 1));
            }
        }
        displayResults();
        scheduler.shutdown();
    }

    private int getUserAnswer() {
        final int[] userAnswer = {-1}; // Use array to update the value inside the lambda expression
        Future<?> timeoutFuture = scheduler.schedule(() -> {
            System.out.println("\nTime's up!");
            scanner.nextLine(); // Consume the input to prevent blocking
        }, TIME_LIMIT, TimeUnit.SECONDS);

        System.out.print("Enter your answer (1-" + questions.get(0).getOptions().length + "): ");
        try {
            userAnswer[0] = scanner.nextInt();
            timeoutFuture.cancel(true); // Cancel the timeout if user answers in time
        } catch (InputMismatchException e) {
            System.out.println("Invalid input. Please enter a number.");
            scanner.next(); // Clear invalid input
            return getUserAnswer(); // Retry
        }
        return userAnswer[0];
    }

    private void displayResults() {
        System.out.println("\nQuiz Completed!");
        System.out.println("Your score: " + score + "/" + questions.size());
    }
}
public class main{
public static void main(String[] args) {
        QuizApp quizApp = new QuizApp();
        
        // Example questions
        quizApp.addQuestion(new Question("What is the capital of France?", new String[]{"Berlin", "Madrid", "Paris", "Rome"}, 2));
        quizApp.addQuestion(new Question("Which planet is known as the Red Planet?", new String[]{"Earth", "Mars", "Jupiter", "Saturn"}, 1));
        
        quizApp.startQuiz();
    }
}
